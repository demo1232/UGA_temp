package com.ugavault.android;import android.annotation.SuppressLint;import android.app.AlertDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.content.pm.Signature;import android.net.Uri;import android.os.Bundle;import android.os.Handler;import android.provider.Settings;import android.support.v4.content.ContextCompat;import android.support.v7.app.AppCompatActivity;import android.support.v7.appcompat.BuildConfig;import android.util.Base64;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.RelativeLayout;import android.widget.TextView;import com.ncsavault.controllers.AppController;import com.ncsavault.database.VaultDatabaseHelper;import com.ncsavault.defines.AppDefines;import com.ncsavault.globalconstants.GlobalConstants;import com.ncsavault.models.BannerDataModel;import com.ncsavault.models.BaseModel;import com.ncsavault.service.TrendingFeaturedVideoService;import com.ncsavault.utils.Utils;import com.ncsavault.views.AbstractView;import java.security.MessageDigest;import applicationId.R;/** * SplashActivity is used as first launch screen for AlabamaVault loading data from server */@SuppressLint("Registered")public class SplashActivity extends AppCompatActivity implements AbstractView {    private BannerDataModel bannerDataModel;    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        hashKey();        Bundle intent = getIntent().getExtras();        if (intent != null) {            String videoID = intent.getString("key");            AppController.getInstance().getModelFacade().getLocalModel().setVideoId(videoID);            AppController.getInstance().getModelFacade().getLocalModel().setNotificationVideoId(videoID);        }        // forceCrash();        Log.d("package name: ","package name: " + getPackageName());        Uri uri = getIntent().getData();        if (uri != null) {            AppController.getInstance().getModelFacade().getLocalModel().setUriUrl(uri);            String videoUrl = String.valueOf(uri);            String[] videoParams = videoUrl.split("/");            String lastParam = videoParams[videoParams.length - 1];            String videoUrlData;            if (lastParam.toLowerCase().contains("=")) {                videoUrlData = lastParam.split("=")[1];            } else {                videoUrlData = lastParam.split("\\.")[0];            }            AppController.getInstance().getModelFacade().getLocalModel().setVideoUrl(videoUrlData);        }        setContentView(R.layout.splash_activity);        TextView text =  findViewById(R.id.text);        Log.i("Splash",""+BuildConfig.BUILD_TYPE);        text.setVisibility(View.GONE);//        if (BuildConfig.BUILD_TYPE.equalsIgnoreCase("debug")) {//            text.setVisibility(View.VISIBLE);//        } else {//            text.setVisibility(View.GONE);//        }        initViews();        startApp();    }    /**     * Method is used to get SHA signature     */    private void hashKey() {        try {            @SuppressLint("PackageManagerGetSignatures") PackageInfo info = getPackageManager()                    .getPackageInfo("com.ugavault.android",                            PackageManager.GET_SIGNATURES);            for (Signature signature : info.signatures) {                MessageDigest md = MessageDigest.getInstance("SHA");                md.update(signature.toByteArray());                // Log.d("My key Hash : ", Base64.encodeToString(md.digest(), Base64.DEFAULT));                Log.d("My key Hash : ", "My key Hash :" + Base64.encodeToString(md.digest(), Base64.DEFAULT));            }        } catch (Exception e) {            e.printStackTrace();        }    }    /**     * Method is used to initialize views     */    private void initViews() {        try {            Utils.getInstance().setAppName(this);            int screenWidth;            screenWidth = Utils.getScreenDimensions(this);            int dimension = (int) (screenWidth * 0.45);            RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(dimension, dimension);            lp.setMargins(0, 30, 0, 0);            lp.addRule(RelativeLayout.CENTER_HORIZONTAL);        } catch (Exception e) {            e.printStackTrace();        }    }    /**     * Method is used to start home screen and get data from server     */    private void startApp() {        if (Utils.isInternetAvailable(AppController.getInstance().getApplicationContext())) {            loadData();        } else {            Utils.getInstance().showToastMessage(this, GlobalConstants.MSG_NO_CONNECTION, findViewById(R.id.llToast));            Handler handler = new Handler();            handler.postDelayed(new Runnable() {                @Override                public void run() {                    try {                        SharedPreferences pref = AppController.getInstance().                                getApplicationContext().getSharedPreferences(getResources().getString(R.string.pref_package_name), Context.MODE_PRIVATE);                        long userId = pref.getLong(GlobalConstants.PREF_VAULT_USER_ID_LONG, 0);                        if (userId > 0) {                            AppController.getInstance().handleEvent(AppDefines.EVENT_ID_HOME_SCREEN);                            overridePendingTransition(R.anim.slideup, R.anim.nochange);                            finish();                            startService(new Intent(SplashActivity.this, TrendingFeaturedVideoService.class));                        } else {                            VaultDatabaseHelper.getInstance(SplashActivity.this).removeAllTabBannerData();                            AppController.getInstance().handleEvent(AppDefines.EVENT_ID_LOGIN_SCREEN);                            overridePendingTransition(R.anim.slideup, R.anim.nochange);                            finish();                        }                    } catch (Exception e) {                        e.printStackTrace();                    }                }            }, 3000);        }    }    private void showPermissionsConfirmationDialog(String message) {        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);        alertDialogBuilder.setTitle("Permission Denied");        alertDialogBuilder                .setMessage(message);        alertDialogBuilder.setPositiveButton("Go to Settings",                new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface arg0, int arg1) {                        goToSettings();                    }                });        alertDialogBuilder.setNegativeButton("Cancel",                new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        showPermissionsConfirmationDialog(getResources().getString(R.string.vault_permission));                    }                });        AlertDialog alertDialog = alertDialogBuilder.create();        alertDialog.setCancelable(false);        alertDialog.setCanceledOnTouchOutside(false);        alertDialog.show();        Button negativeButton = alertDialog.getButton(DialogInterface.BUTTON_NEGATIVE);        negativeButton.setTextColor(ContextCompat.getColor(this, R.color.app_theme_color));        Button positiveButton = alertDialog.getButton(DialogInterface.BUTTON_POSITIVE);        positiveButton.setTextColor(ContextCompat.getColor(this, R.color.app_theme_color));    }    /**     * Method is used to go to settings screen     */    private void goToSettings() {        Intent myAppSettings = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS, Uri.parse("package:" + getPackageName()));        myAppSettings.addCategory(Intent.CATEGORY_DEFAULT);        myAppSettings.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);        startActivityForResult(myAppSettings, 500);    }    @Override    public void update() {        Log.d("splash update", "splash update");        if (bannerDataModel.getState() == BaseModel.STATE_SUCCESS) {            try {                bannerDataModel.unRegisterView(this);            } catch (Exception e) {                e.printStackTrace();            }        }    }    /**     * load splash screen data from server     */    private void loadData() {        if (bannerDataModel != null) {            bannerDataModel.unRegisterView(this);        }        bannerDataModel = AppController.getInstance().getModelFacade().getRemoteModel().getBannerDataModel();        bannerDataModel.registerView(this);        bannerDataModel.loadTabData();        new Handler().postDelayed(new Runnable() {            @Override            public void run() {                SharedPreferences pref = AppController.getInstance().                        getApplication().getSharedPreferences(getResources().getString(R.string.pref_package_name), Context.MODE_PRIVATE);                long userId = pref.getLong(GlobalConstants.PREF_VAULT_USER_ID_LONG, 0);                if (userId > 0) {                    AppController.getInstance().handleEvent(AppDefines.EVENT_ID_HOME_SCREEN);                    overridePendingTransition(R.anim.slideup, R.anim.nochange);                    finish();                    startService(new Intent(SplashActivity.this, TrendingFeaturedVideoService.class));                } else {                    VaultDatabaseHelper.getInstance(SplashActivity.this).removeAllTabBannerData();                    AppController.getInstance().handleEvent(AppDefines.EVENT_ID_LOGIN_SCREEN);                    overridePendingTransition(R.anim.slideup, R.anim.nochange);                    finish();                }            }        }, 3000);    }}